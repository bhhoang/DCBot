// modules/masoi.js
const { 
  EmbedBuilder, 
  ButtonBuilder, 
  ActionRowBuilder, 
  ButtonStyle,
  PermissionFlagsBits,
  StringSelectMenuBuilder
} = require('discord.js');

// Game roles with Vietnamese names and descriptions
const ROLES = {
  WEREWOLF: {
    name: "Ma S√≥i",
    description: "ƒê√™m t·ªëi, b·∫°n c√≥ th·ªÉ ch·ªçn m·ªôt ng∆∞·ªùi ch∆°i ƒë·ªÉ gi·∫øt",
    team: "MA S√ìI",
    nightAction: true,
    emoji: "üê∫"
  },
  VILLAGER: {
    name: "D√¢n L√†ng",
    description: "B·∫°n kh√¥ng c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát, h√£y bi·ªÉu quy·∫øt s√°ng su·ªët",
    team: "D√ÇN L√ÄNG",
    nightAction: false,
    emoji: "üë®‚Äçüåæ"
  },
  SEER: {
    name: "Ti√™n Tri",
    description: "M·ªói ƒë√™m, b·∫°n c√≥ th·ªÉ nh√¨n th·∫•y vai tr√≤ c·ªßa m·ªôt ng∆∞·ªùi ch∆°i kh√°c",
    team: "D√ÇN L√ÄNG",
    nightAction: true,
    emoji: "üëÅÔ∏è"
  },
  BODYGUARD: {
    name: "B·∫£o V·ªá",
    description: "M·ªói ƒë√™m, b·∫°n c√≥ th·ªÉ b·∫£o v·ªá m·ªôt ng∆∞·ªùi ch∆°i kh·ªèi b·ªã t·∫•n c√¥ng",
    team: "D√ÇN L√ÄNG",
    nightAction: true,
    emoji: "üõ°Ô∏è"
  },
  WITCH: {
    name: "Ph√π Th·ªßy",
    description: "B·∫°n c√≥ hai b√¨nh thu·ªëc: m·ªôt ƒë·ªÉ c·ª©u s·ªëng, m·ªôt ƒë·ªÉ gi·∫øt ch·∫øt",
    team: "D√ÇN L√ÄNG",
    nightAction: true,
    emoji: "üßô‚Äç‚ôÄÔ∏è"
  },
  HUNTER: {
    name: "Th·ª£ SƒÉn",
    description: "Khi b·∫°n ch·∫øt, b·∫°n c√≥ th·ªÉ b·∫Øn ch·∫øt m·ªôt ng∆∞·ªùi kh√°c",
    team: "D√ÇN L√ÄNG",
    nightAction: false,
    emoji: "üèπ"
  }
};

// Game states
const STATE = {
  LOBBY: 'LOBBY',
  NIGHT: 'NIGHT',
  DAY: 'DAY',
  VOTING: 'VOTING',
  ENDED: 'ENDED'
};

// Game phases for the night
const NIGHT_PHASE = {
  SEER: 'SEER',
  BODYGUARD: 'BODYGUARD',
  WITCH: 'WITCH',
  WEREWOLF: 'WEREWOLF'
};

class WerewolfGame {
  constructor(channel, host) {
    this.channel = channel;
    this.host = host;
    this.players = new Map();
    this.state = STATE.LOBBY;
    this.day = 0;
    this.nightPhase = null;
    this.votes = new Map();
    this.nightActions = new Map();
    this.deaths = [];
    this.protected = null;
    this.messageId = null;
    this.lastUpdated = Date.now();
    this.witch = {
      healPotion: true,
      killPotion: true
    };
    this.roleDistribution = {
      WEREWOLF: 2,
      VILLAGER: 3,
      SEER: 1,
      BODYGUARD: 1,
      WITCH: 0,
      HUNTER: 0
    };
  }

  // Add a player to the game
  addPlayer(user) {
    if (this.state !== STATE.LOBBY) {
      return false;
    }
    
    if (this.players.has(user.id)) {
      return false;
    }
    
    this.players.set(user.id, {
      id: user.id,
      user: user,
      name: user.username,
      role: null,
      isAlive: true,
      voteCount: 0,
      hasVoted: false,
      hasActed: false
    });
    
    return true;
  }
  
  // Remove a player from the game
  removePlayer(userId) {
    if (this.state !== STATE.LOBBY) {
      return false;
    }
    
    return this.players.delete(userId);
  }
  
  // Start the game
  async start(channel) {
    if (this.state !== STATE.LOBBY) {
      return false;
    }
    
    if (this.players.size < 4) {
      return {
        success: false,
        message: "C·∫ßn √≠t nh·∫•t 4 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i."
      };
    }
    
    // Assign roles to players
    this.assignRoles();
    
    // Send role DMs to all players
    await this.sendRoleDMs();
    
    // Start the first night
    this.state = STATE.NIGHT;
    this.day = 1;
    this.startNight();
    
    return {
      success: true,
      message: null
    };
  }
  
  // Assign roles to players
  assignRoles() {
    // Get all players
    const playerIds = Array.from(this.players.keys());
    
    // Adjust role distribution based on player count
    this.adjustRoleDistribution(playerIds.length);
    
    // Create role pool
    const rolePool = [];
    for (const [roleId, count] of Object.entries(this.roleDistribution)) {
      for (let i = 0; i < count; i++) {
        rolePool.push(roleId);
      }
    }
    
    // Shuffle role pool
    this.shuffle(rolePool);
    
    // Assign roles
    playerIds.forEach((playerId, index) => {
      const player = this.players.get(playerId);
      if (index < rolePool.length) {
        player.role = rolePool[index];
      } else {
        // Default to villager if not enough roles
        player.role = "VILLAGER";
      }
    });
  }
  
  // Adjust role distribution based on player count
  adjustRoleDistribution(playerCount) {
    // Reset to default first
    this.roleDistribution = {
      WEREWOLF: 2,
      VILLAGER: 3,
      SEER: 1,
      BODYGUARD: 1,
      WITCH: 0,
      HUNTER: 0
    };
    
    // Add more roles as player count increases
    if (playerCount >= 6) {
      this.roleDistribution.WITCH = 1;
    }
    
    if (playerCount >= 8) {
      this.roleDistribution.HUNTER = 1;
    }
    
    if (playerCount >= 10) {
      this.roleDistribution.WEREWOLF = 3;
    }
    
    if (playerCount >= 12) {
      this.roleDistribution.VILLAGER += 2;
    }
    
    // Ensure we have enough roles for all players
    const totalRoles = Object.values(this.roleDistribution).reduce((a, b) => a + b, 0);
    if (totalRoles < playerCount) {
      this.roleDistribution.VILLAGER += (playerCount - totalRoles);
    }
  }
  
  // Send role DMs to all players
  async sendRoleDMs() {
    const promises = [];
    
    for (const player of this.players.values()) {
      const role = ROLES[player.role];
      const embed = new EmbedBuilder()
        .setTitle(`üéÆ Ma S√≥i - Vai Tr√≤ C·ªßa B·∫°n`)
        .setDescription(`B·∫°n l√† **${role.name}** ${role.emoji}`)
        .setColor(role.team === "MA S√ìI" ? "#ff0000" : "#00b0f4")
        .addFields(
          { name: "M√¥ T·∫£", value: role.description },
          { name: "Phe", value: role.team }
        )
        .setFooter({ text: "Gi·ªØ b√≠ m·∫≠t vai tr√≤ c·ªßa b·∫°n!" });
      
      // Try to send DM
      try {
        const dm = await player.user.send({ embeds: [embed] });
        promises.push(dm);
      } catch (error) {
        // If DM fails, notify in channel
        console.error(`Failed to send role DM to ${player.name}:`, error);
        const failEmbed = new EmbedBuilder()
          .setTitle(`‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng`)
          .setDescription(`${player.user}, c√†i ƒë·∫∑t quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n ƒëang ch·∫∑n tin nh·∫Øn. Vui l√≤ng b·∫≠t nh·∫≠n tin nh·∫Øn ri√™ng ƒë·ªÉ nh·∫≠n vai tr√≤ c·ªßa b·∫°n.`)
          .setColor("#ff9900");
        
        const failMsg = await this.channel.send({ embeds: [failEmbed] });
        promises.push(failMsg);
      }
    }
    
    await Promise.all(promises);
  }
  
  // Start the night phase
  startNight() {
    this.state = STATE.NIGHT;
    this.nightPhase = null;
    this.nightActions = new Map();
    this.advanceNightPhase();
  }
  
  // Advance to the next night phase
  advanceNightPhase() {
    const phases = Object.values(NIGHT_PHASE);
    
    // If no phase set, start with the first one
    if (!this.nightPhase) {
      this.nightPhase = phases[0];
    } else {
      // Move to the next phase
      const currentIndex = phases.indexOf(this.nightPhase);
      if (currentIndex === phases.length - 1) {
        // All phases completed, process night results
        this.processNightResults();
        return;
      }
      
      this.nightPhase = phases[currentIndex + 1];
    }
    
    // Check if there are any players with this role
    const playersWithRole = this.getAlivePlayersWithRole(this.nightPhase);
    
    if (playersWithRole.length === 0) {
      // Skip to the next phase if no players have this role
      this.advanceNightPhase();
      return;
    }
    
    // Send night action prompt to players with this role
    this.promptNightAction();
  }
  
  // Prompt players for their night action
  async promptNightAction() {
    const playersWithRole = this.getAlivePlayersWithRole(this.nightPhase);
    const targets = this.getAlivePlayersExcept([]);
    
    // Skip if no players with this role
    if (playersWithRole.length === 0) {
      this.advanceNightPhase();
      return;
    }
    
    // Clear previous night action messages
    // (in a real implementation you'd want to track and delete these)
    
    // For each player with the role, send them a prompt
    for (const player of playersWithRole) {
      const role = ROLES[player.role];
      
      // Create embed for night action
      const embed = new EmbedBuilder()
        .setTitle(`üåô ƒê√™m ${this.day} - H√†nh ƒê·ªông C·ªßa ${role.name}`)
        .setDescription(`ƒê√£ ƒë·∫øn l∆∞·ª£t h√†nh ƒë·ªông c·ªßa b·∫°n. H√£y ch·ªçn m·ªôt ng∆∞·ªùi ch∆°i.`)
        .setColor("#2f3136");
      
      // Create select menu for target selection
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId(`masoi_action_${player.id}`)
        .setPlaceholder('Ch·ªçn ng∆∞·ªùi ch∆°i...');
      
      // Add options for each target
      targets.forEach(target => {
        if (this.nightPhase === NIGHT_PHASE.WEREWOLF && target.role === "WEREWOLF") {
          return; // Werewolves can't target other werewolves
        }
        
        selectMenu.addOptions({
          label: target.name,
          value: target.id,
          description: `Ch·ªçn ${target.name} l√†m m·ª•c ti√™u`,
        });
      });
      
      // Add special options for Witch
      if (this.nightPhase === NIGHT_PHASE.WITCH) {
        // Add witch-specific options here
        if (this.witch.healPotion) {
          selectMenu.addOptions({
            label: "S·ª≠ d·ª•ng b√¨nh thu·ªëc c·ª©u",
            value: "heal",
            description: "C·ª©u ng∆∞·ªùi b·ªã Ma S√≥i t·∫•n c√¥ng",
          });
        }
        
        if (this.witch.killPotion) {
          selectMenu.addOptions({
            label: "S·ª≠ d·ª•ng b√¨nh thu·ªëc ƒë·ªôc",
            value: "kill",
            description: "Gi·∫øt m·ªôt ng∆∞·ªùi ch∆°i",
          });
        }
        
        selectMenu.addOptions({
          label: "Kh√¥ng l√†m g√¨",
          value: "none",
          description: "B·ªè qua l∆∞·ª£t n√†y",
        });
      }
      
      // For Bodyguard, add "self" option if they didn't protect themselves last night
      if (this.nightPhase === NIGHT_PHASE.BODYGUARD && this.protected !== player.id) {
        selectMenu.addOptions({
          label: "B·∫£o v·ªá b·∫£n th√¢n",
          value: "self",
          description: "B·∫£o v·ªá ch√≠nh b·∫°n ƒë√™m nay",
        });
      }
      
      const row = new ActionRowBuilder().addComponents(selectMenu);
      
      // Send the prompt to the player
      try {
        await player.user.send({ embeds: [embed], components: [row] });
      } catch (error) {
        console.error(`Failed to send night action prompt to ${player.name}:`, error);
        // Auto-advance after a timeout in case the player doesn't respond
        setTimeout(() => {
          if (!this.nightActions.has(player.id)) {
            this.handleNightAction(player.id, null);
          }
        }, 60000); // 1 minute timeout
      }
    }
    
    // Update game status in the main channel
    const statusEmbed = new EmbedBuilder()
      .setTitle(`üåô ƒê√™m ${this.day}`)
      .setDescription(`M·ªçi ng∆∞·ªùi ƒëi ng·ªß. ƒêang ch·ªù ${this.getNightRoleName()} th·ª±c hi·ªán h√†nh ƒë·ªông...`)
      .setColor("#2f3136");
    
    await this.channel.send({ embeds: [statusEmbed] });
    
    // Auto-advance night phase after timeout
    setTimeout(() => {
      // Check if we're still in the same phase
      if (this.state === STATE.NIGHT && this.nightPhase) {
        // Check if all players have acted
        const pendingPlayers = playersWithRole.filter(p => !this.nightActions.has(p.id));
        if (pendingPlayers.length > 0) {
          // Auto-submit null actions for pending players
          for (const player of pendingPlayers) {
            this.handleNightAction(player.id, null);
          }
        }
      }
    }, 90000); // 1.5 minute timeout for night actions
  }
  
  // Handle a night action from a player
  handleNightAction(playerId, targetId) {
    const player = this.players.get(playerId);
    
    // Check if player exists and is alive
    if (!player || !player.isAlive) {
      return false;
    }
    
    // Check if player has the correct role for the current phase
    if (player.role !== this.nightPhase) {
      return false;
    }
    
    // Check if player already acted
    if (this.nightActions.has(playerId)) {
      return false;
    }
    
    // Record the action
    this.nightActions.set(playerId, targetId);
    
    // Check if all players of the current role have acted
    const playersWithRole = this.getAlivePlayersWithRole(this.nightPhase);
    const pendingPlayers = playersWithRole.filter(p => !this.nightActions.has(p.id));
    
    if (pendingPlayers.length === 0) {
      // All players have acted, move to the next phase
      this.advanceNightPhase();
    }
    
    return true;
  }
  
  // Process the results of the night phase
  async processNightResults() {
    // Get werewolf target
    let werewolfTarget = this.getWerewolfTarget();
    
    // Get bodyguard protection
    const bodyguardTarget = this.getBodyguardTarget();
    if (bodyguardTarget) {
      this.protected = bodyguardTarget;
    }
    
    // Check if target was protected
    if (werewolfTarget && werewolfTarget === this.protected) {
      werewolfTarget = null; // Target was protected
    }
    
    // Process witch actions
    const witchKillTarget = this.getWitchKillTarget();
    const witchSaveTarget = this.getWitchSaveTarget();
    
    // Check if witch used heal potion
    if (werewolfTarget && witchSaveTarget === werewolfTarget) {
      werewolfTarget = null; // Target was saved by witch
      this.witch.healPotion = false;
    }
    
    // Compile list of deaths
    this.deaths = [];
    
    if (werewolfTarget) {
      this.deaths.push({
        playerId: werewolfTarget,
        killer: "WEREWOLF",
        message: "B·ªã Ma S√≥i c·∫Øn ch·∫øt"
      });
    }
    
    if (witchKillTarget) {
      this.deaths.push({
        playerId: witchKillTarget,
        killer: "WITCH",
        message: "B·ªã ƒë·∫ßu ƒë·ªôc b·ªüi Ph√π Th·ªßy"
      });
      this.witch.killPotion = false;
    }
    
    // Apply deaths
    for (const death of this.deaths) {
      const player = this.players.get(death.playerId);
      if (player) {
        player.isAlive = false;
      }
    }
    
    // Start the day phase
    this.startDay();
  }
  
  // Get the target of the werewolves
  getWerewolfTarget() {
    const werewolves = this.getAlivePlayersWithRole("WEREWOLF");
    const votes = new Map();
    
    // Count votes from all werewolves
    for (const werewolf of werewolves) {
      const targetId = this.nightActions.get(werewolf.id);
      if (targetId) {
        votes.set(targetId, (votes.get(targetId) || 0) + 1);
      }
    }
    
    // Get the target with the most votes
    let maxVotes = 0;
    let target = null;
    
    for (const [targetId, voteCount] of votes.entries()) {
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        target = targetId;
      }
    }
    
    return target;
  }
  
  // Get the target of the bodyguard
  getBodyguardTarget() {
    const bodyguards = this.getAlivePlayersWithRole("BODYGUARD");
    if (bodyguards.length === 0) return null;
    
    // Just use the first bodyguard's action (there should be only one)
    const bodyguard = bodyguards[0];
    const targetId = this.nightActions.get(bodyguard.id);
    
    // Handle special "self" action
    if (targetId === "self") {
      return bodyguard.id;
    }
    
    return targetId;
  }
  
  // Get the kill target of the witch
  getWitchKillTarget() {
    const witches = this.getAlivePlayersWithRole("WITCH");
    if (witches.length === 0 || !this.witch.killPotion) return null;
    
    // Just use the first witch's action (there should be only one)
    const witch = witches[0];
    const action = this.nightActions.get(witch.id);
    
    // Check if the action was to kill someone
    if (action && action !== "heal" && action !== "none") {
      return action;
    }
    
    return null;
  }
  
  // Get the save target of the witch
  getWitchSaveTarget() {
    const witches = this.getAlivePlayersWithRole("WITCH");
    if (witches.length === 0 || !this.witch.healPotion) return null;
    
    // Just use the first witch's action (there should be only one)
    const witch = witches[0];
    const action = this.nightActions.get(witch.id);
    
    // Check if the action was to heal someone
    if (action === "heal") {
      // Get the werewolf target
      return this.getWerewolfTarget();
    }
    
    return null;
  }
  
  // Start the day phase
  async startDay() {
    this.state = STATE.DAY;
    this.votes = new Map();
    
    // Clear night actions
    this.nightActions = new Map();
    
    // Report night results
    await this.reportNightResults();
    
    // Check game end conditions
    if (this.checkGameEnd()) {
      await this.endGame();
      return;
    }
    
    // Set timer for voting phase
    setTimeout(() => {
      if (this.state === STATE.DAY) {
        this.startVoting();
      }
    }, 90000); // 1.5 minutes for discussion
  }
  
  // Report the results of the night
  async reportNightResults() {
    // Create embed for night results
    const embed = new EmbedBuilder()
      .setTitle(`‚òÄÔ∏è Ng√†y ${this.day}`)
      .setColor("#f1c40f");
    
    if (this.deaths.length === 0) {
      embed.setDescription("M·ªçi ng∆∞·ªùi th·ª©c d·∫≠y an to√†n. Kh√¥ng ai b·ªã gi·∫øt trong ƒë√™m qua.");
    } else {
      const deathMessages = this.deaths.map(death => {
        const player = this.players.get(death.playerId);
        return `**${player.name}** (${ROLES[player.role].name}) ${death.message}.`;
      });
      
      embed.setDescription(`Bu·ªïi s√°ng ƒë·∫øn v√† l√†ng l√†ng ph√°t hi·ªán:\n\n${deathMessages.join('\n')}`);
    }
    
    // Add instructions for the day
    embed.addFields(
      { name: "Th·∫£o Lu·∫≠n", value: "B√¢y gi·ªù l√† l√∫c th·∫£o lu·∫≠n. Ai l√† Ma S√≥i? B·∫°n c√≥ b·∫±ng ch·ª©ng n√†o kh√¥ng?" },
      { name: "Th·ªùi Gian", value: "B·ªè phi·∫øu s·∫Ω b·∫Øt ƒë·∫ßu sau 1.5 ph√∫t." }
    );
    
    await this.channel.send({ embeds: [embed] });
    
    // Send information to Seer if they used their ability
    await this.reportSeerResult();
  }
  
  // Report the result of the Seer's night action
  async reportSeerResult() {
    const seers = this.getAlivePlayersWithRole("SEER");
    if (seers.length === 0) return;
    
    // Just use the first seer's action (there should be only one)
    const seer = seers[0];
    const targetId = this.nightActions.get(seer.id);
    
    if (!targetId) return;
    
    const target = this.players.get(targetId);
    if (!target) return;
    
    // Create embed for seer result
    const embed = new EmbedBuilder()
      .setTitle(`üëÅÔ∏è K·∫øt Qu·∫£ Ti√™n Tri`)
      .setDescription(`B·∫°n ƒë√£ ti√™n tri **${target.name}**`)
      .setColor("#9b59b6");
    
    if (target.role === "WEREWOLF") {
      embed.addFields({ name: "K·∫øt Qu·∫£", value: "Ng∆∞·ªùi ch∆°i n√†y l√† **Ma S√≥i**! üê∫" });
    } else {
      embed.addFields({ name: "K·∫øt Qu·∫£", value: "Ng∆∞·ªùi ch∆°i n√†y **kh√¥ng ph·∫£i** Ma S√≥i. ‚úÖ" });
    }
    
    try {
      await seer.user.send({ embeds: [embed] });
    } catch (error) {
      console.error(`Failed to send seer result to ${seer.name}:`, error);
    }
  }
  
  // Start the voting phase
  async startVoting() {
    this.state = STATE.VOTING;
    this.votes = new Map();
    
    // Reset player vote tracking
    for (const player of this.players.values()) {
      if (player.isAlive) {
        player.hasVoted = false;
        player.voteCount = 0;
      }
    }
    
    // Create voting embed
    const embed = new EmbedBuilder()
      .setTitle(`üó≥Ô∏è B·ªè Phi·∫øu - Ng√†y ${this.day}`)
      .setDescription("ƒê√£ ƒë·∫øn l√∫c b·ªè phi·∫øu! Ai s·∫Ω b·ªã treo c·ªï h√¥m nay?")
      .setColor("#e74c3c");
    
    // Create voting buttons
    const rows = [];
    const alivePlayers = this.getAlivePlayers();
    let currentRow = new ActionRowBuilder();
    
    alivePlayers.forEach((player, index) => {
      const button = new ButtonBuilder()
        .setCustomId(`masoi_vote_${player.id}`)
        .setLabel(player.name)
        .setStyle(ButtonStyle.Primary);
      
      currentRow.addComponents(button);
      
      // Create a new row every 5 buttons (Discord limit)
      if ((index + 1) % 5 === 0 || index === alivePlayers.length - 1) {
        rows.push(currentRow);
        currentRow = new ActionRowBuilder();
      }
    });
    
    // Add a "Skip Vote" button
    if (rows[rows.length - 1].components.length < 5) {
      const skipButton = new ButtonBuilder()
        .setCustomId('masoi_vote_skip')
        .setLabel('B·ªè Qua')
        .setStyle(ButtonStyle.Secondary);
      
      rows[rows.length - 1].addComponents(skipButton);
    } else {
      const skipButton = new ButtonBuilder()
        .setCustomId('masoi_vote_skip')
        .setLabel('B·ªè Qua')
        .setStyle(ButtonStyle.Secondary);
      
      rows.push(new ActionRowBuilder().addComponents(skipButton));
    }
    
    // Send voting message
    const voteMsg = await this.channel.send({
      embeds: [embed],
      components: rows
    });
    
    // Set timeout for voting
    setTimeout(() => {
      if (this.state === STATE.VOTING) {
        this.endVoting(voteMsg);
      }
    }, 60000); // 1 minute for voting
  }
  
  // Handle a vote from a player
  handleVote(voterId, targetId) {
    const voter = this.players.get(voterId);
    
    // Check if voter exists and is alive
    if (!voter || !voter.isAlive) {
      return false;
    }
    
    // Check if voter already voted
    if (voter.hasVoted) {
      // Remove previous vote
      const previousVote = this.votes.get(voterId);
      if (previousVote) {
        const previousTarget = this.players.get(previousVote);
        if (previousTarget) {
          previousTarget.voteCount--;
        }
      }
    }
    
    // Skip vote
    if (targetId === 'skip') {
      voter.hasVoted = true;
      this.votes.set(voterId, null);
      return true;
    }
    
    // Check if target exists and is alive
    const target = this.players.get(targetId);
    if (!target || !target.isAlive) {
      return false;
    }
    
    // Register vote
    voter.hasVoted = true;
    this.votes.set(voterId, targetId);
    target.voteCount++;
    
    // Check if all players have voted
    const alivePlayers = this.getAlivePlayers();
    const votedPlayers = alivePlayers.filter(p => p.hasVoted);
    
    if (votedPlayers.length === alivePlayers.length) {
      // All players have voted, end voting immediately
      this.endVoting();
    }
    
    return true;
  }
  
  // End the voting phase
  async endVoting(voteMsg = null) {
    // Find player with most votes
    let maxVotes = 0;
    let executed = null;
    let tie = false;
    
    for (const player of this.players.values()) {
      if (player.voteCount > maxVotes) {
        maxVotes = player.voteCount;
        executed = player;
        tie = false;
      } else if (player.voteCount === maxVotes && maxVotes > 0) {
        tie = true;
      }
    }
    
    // Create result embed
    const embed = new EmbedBuilder()
      .setTitle(`üì¢ K·∫øt Qu·∫£ B·ªè Phi·∫øu - Ng√†y ${this.day}`)
      .setColor("#e74c3c");
    
    // No one voted or tie
    if (!executed || tie || maxVotes === 0) {
      embed.setDescription("Kh√¥ng c√≥ ai b·ªã treo c·ªï do kh√¥ng ƒë·ªß bi·ªÉu quy·∫øt th·ªëng nh·∫•t.");
    } else {
      // Someone was executed
      embed.setDescription(`**${executed.name}** (${ROLES[executed.role].name} ${ROLES[executed.role].emoji}) ƒë√£ b·ªã treo c·ªï v·ªõi ${maxVotes} phi·∫øu b·∫ßu.`);
      
      // Mark player as dead
      executed.isAlive = false;
      
      // Check for Hunter special ability
      if (executed.role === "HUNTER") {
        await this.handleHunterAbility(executed);
      }
    }
    
    // Disable voting buttons if message exists
    if (voteMsg) {
      try {
        await voteMsg.edit({ components: [] });
      } catch (error) {
        console.error("Failed to disable voting buttons:", error);
      }
    }
    
    // Send results
    await this.channel.send({ embeds: [embed] });
    
    // Check game end conditions
    if (this.checkGameEnd()) {
      await this.endGame();
      return;
    }
    
    // Start next night
    setTimeout(() => {
      if (this.state !== STATE.ENDED) {
        this.day++;
        this.startNight();
      }
    }, 10000); // 10 seconds before night starts
  }
  
  // Handle Hunter's special ability when they die
  async handleHunterAbility(hunter) {
    // Hunter can shoot someone when they die
    const embed = new EmbedBuilder()
      .setTitle(`üèπ Kh·∫£ NƒÉng ƒê·∫∑c Bi·ªát C·ªßa Th·ª£ SƒÉn`)
      .setDescription(`B·∫°n ƒë√£ b·ªã treo c·ªï, nh∆∞ng c√≥ th·ªÉ b·∫Øn m·ªôt m≈©i t√™n cu·ªëi c√πng. H√£y ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën b·∫Øn.`)
      .setColor("#e67e22");
    
    // Create target selection menu
    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId(`masoi_hunter_${hunter.id}`)
      .setPlaceholder('Ch·ªçn m·ªôt ng∆∞·ªùi ƒë·ªÉ b·∫Øn...');
    
    // Add all alive players as options
    const targets = this.getAlivePlayersExcept([hunter.id]);
    targets.forEach(target => {
      selectMenu.addOptions({
        label: target.name,
        value: target.id,
        description: `B·∫Øn ${target.name}`,
      });
    });
    
    // Add "Don't shoot" option
    selectMenu.addOptions({
      label: "Kh√¥ng b·∫Øn ai",
      value: "none",
      description: "Quy·∫øt ƒë·ªãnh kh√¥ng s·ª≠ d·ª•ng kh·∫£ nƒÉng ƒë·∫∑c bi·ªát",
    });
    
    const row = new ActionRowBuilder().addComponents(selectMenu);
    
    try {
      // Send the prompt to the Hunter
      await hunter.user.send({ embeds: [embed], components: [row] });
      
      // Notify the game channel
      const channelEmbed = new EmbedBuilder()
        .setTitle(`üèπ Kh·∫£ NƒÉng ƒê·∫∑c Bi·ªát C·ªßa Th·ª£ SƒÉn`)
        .setDescription(`**${hunter.name}** l√† Th·ª£ SƒÉn! Th·ª£ SƒÉn ƒëang ch·ªçn ng∆∞·ªùi ƒë·ªÉ b·∫Øn...`)
        .setColor("#e67e22");
      
      await this.channel.send({ embeds: [channelEmbed] });
      
      // Add a timeout for Hunter's action
      setTimeout(async () => {
        // If game is still active and hunter hasn't shot
        // Auto-select "none" option
        // This would be implemented in a real bot through a collector
      }, 30000); // 30 seconds to decide
      
    } catch (error) {
      console.error(`Failed to send Hunter ability prompt to ${hunter.name}:`, error);
      // If we can't DM the hunter, just skip their ability
    }
  }
  
  // Check if the game has ended
  checkGameEnd() {
    // Count alive werewolves and villagers
    let aliveWerewolves = 0;
    let aliveVillagers = 0;
    
    for (const player of this.players.values()) {
      if (!player.isAlive) continue;
      
      if (player.role === "WEREWOLF") {
        aliveWerewolves++;
      } else {
        aliveVillagers++;
      }
    }
    
    // No werewolves left - villagers win
    if (aliveWerewolves === 0) {
      this.winner = "D√ÇN L√ÄNG";
      return true;
    }
    
    // Werewolves equal or outnumber villagers - werewolves win
    if (aliveWerewolves >= aliveVillagers) {
      this.winner = "MA S√ìI";
      return true;
    }
    
    // Game continues
    return false;
  }
  
  // End the game and announce winners
  async endGame() {
    this.state = STATE.ENDED;
    
    // Create winner announcement embed
    const embed = new EmbedBuilder()
      .setTitle(`üèÜ Tr√≤ Ch∆°i K·∫øt Th√∫c - ${this.winner} CHI·∫æN TH·∫ÆNG!`)
      .setColor(this.winner === "MA S√ìI" ? "#ff0000" : "#00b0f4");
    
    // Create description with all players and their roles
    const playersList = Array.from(this.players.values())
      .map(player => {
        const role = ROLES[player.role];
        const status = player.isAlive ? "C√≤n s·ªëng" : "ƒê√£ ch·∫øt";
        return `**${player.name}** - ${role.name} ${role.emoji} (${status})`;
      })
      .join('\n');
    
    embed.setDescription(`**Danh s√°ch ng∆∞·ªùi ch∆°i:**\n${playersList}`);
    
    // Send winner announcement
    await this.channel.send({ embeds: [embed] });
  }
  
  // Helper methods
  
  // Get all alive players
  getAlivePlayers() {
    return Array.from(this.players.values()).filter(p => p.isAlive);
  }
  
  // Get all alive players with a specific role
  getAlivePlayersWithRole(role) {
    return Array.from(this.players.values()).filter(p => p.isAlive && p.role === role);
  }
  
  // Get all alive players except those with specific IDs
  getAlivePlayersExcept(excludeIds) {
    return Array.from(this.players.values()).filter(p => 
      p.isAlive && !excludeIds.includes(p.id)
    );
  }
  
  // Get the current night role name
  getNightRoleName() {
    switch(this.nightPhase) {
      case NIGHT_PHASE.SEER:
        return "Ti√™n Tri";
      case NIGHT_PHASE.BODYGUARD:
        return "B·∫£o V·ªá";
      case NIGHT_PHASE.WITCH:
        return "Ph√π Th·ªßy";
      case NIGHT_PHASE.WEREWOLF:
        return "Ma S√≥i";
      default:
        return "";
    }
  }
  
  // Shuffle an array (Fisher-Yates algorithm)
  shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }
}

// Map to store active games by channel ID
const activeGames = new Map();

module.exports = {
  meta: {
    name: "masoi",
    type: "game",
    version: "1.0.0",
    description: "Tr√≤ ch∆°i Ma S√≥i trong Discord",
    dependencies: [],
    npmDependencies: {}
  },
  
  // Module initialization
  async init(client, bot) {
    console.log("Module Ma S√≥i ƒë√£ kh·ªüi t·∫°o!");
    
    // Set up button and select menu interaction handlers
    client.on('interactionCreate', async (interaction) => {
      try {
        // Handle button interactions for joining and voting
        if (interaction.isButton()) {
          if (interaction.customId === 'masoi_join') {
            await this.handleJoinButton(interaction);
          } else if (interaction.customId === 'masoi_start') {
            await this.handleStartButton(interaction);
          } else if (interaction.customId.startsWith('masoi_vote_')) {
            await this.handleVoteButton(interaction);
          }
        }
        
        // Handle select menu interactions for night actions
        if (interaction.isStringSelectMenu()) {
          if (interaction.customId.startsWith('masoi_action_')) {
            await this.handleNightActionSelect(interaction);
          } else if (interaction.customId.startsWith('masoi_hunter_')) {
            await this.handleHunterSelect(interaction);
          }
        }
      } catch (error) {
        console.error('Error handling interaction:', error);
      }
    });
  },
  
  // Module shutdown
  async shutdown() {
    console.log("Module Ma S√≥i ƒëang t·∫Øt!");
    // Clean up any active games
    activeGames.clear();
  },
  
  // Handle start button interaction
  async handleStartButton(interaction) {
    const game = activeGames.get(interaction.channelId);
    if (!game) {
      await interaction.reply({ 
        content: "Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!", 
        ephemeral: true 
      });
      return;
    }
    
    if (game.host.id !== interaction.user.id) {
      await interaction.reply({ 
        content: "Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu!", 
        ephemeral: true 
      });
      return;
    }
    
    if (game.state !== STATE.LOBBY) {
      await interaction.reply({ 
        content: "Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu!", 
        ephemeral: true 
      });
      return;
    }
    
    await interaction.deferReply();
    
    const result = await game.start();
    
    if (result.success) {
      // Disable the join and start buttons
      try {
        const message = await interaction.channel.messages.fetch(game.messageId);
        await message.edit({ components: [] });
      } catch (error) {
        console.error("Error updating game message:", error);
      }
      
      await interaction.editReply("Tr√≤ ch∆°i Ma S√≥i ƒë√£ b·∫Øt ƒë·∫ßu! M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ri√™ng v·ªõi vai tr√≤ c·ªßa m√¨nh.");
    } else {
      await interaction.editReply(result.message || "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.");
    }
  },
  
  // Handle join button interaction
  async handleJoinButton(interaction) {
    const game = activeGames.get(interaction.channelId);
    if (!game) return;
    
    // Add player to the game
    const success = game.addPlayer(interaction.user);
    
    if (success) {
      await interaction.reply({ 
        content: `${interaction.user} ƒë√£ tham gia tr√≤ ch∆°i Ma S√≥i!`, 
        ephemeral: false 
      });
      
      // Update the game lobby message
      await this.updateLobbyMessage(game);
    } else {
      await interaction.reply({ 
        content: "B·∫°n ƒë√£ tham gia tr√≤ ch∆°i n√†y ho·∫∑c tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu.", 
        ephemeral: true 
      });
    }
  },
  
  // Handle night action select menu interaction
  async handleNightActionSelect(interaction) {
    // Extract player ID from custom ID
    const playerId = interaction.customId.replace('masoi_action_', '');
    
    // Find the game this player is in
    let playerGame = null;
    for (const [channelId, game] of activeGames.entries()) {
      if (game.players.has(playerId)) {
        playerGame = game;
        break;
      }
    }
    
    if (!playerGame || playerGame.state !== STATE.NIGHT) {
      await interaction.reply({ 
        content: "Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông trong l√∫c n√†y.", 
        ephemeral: true 
      });
      return;
    }
    
    // Get selected target
    const targetId = interaction.values[0];
    
    // Register night action
    const success = playerGame.handleNightAction(playerId, targetId);
    
    if (success) {
      // Determine response based on role and target
      let responseMessage = "B·∫°n ƒë√£ th·ª±c hi·ªán h√†nh ƒë·ªông c·ªßa m√¨nh.";
      
      const player = playerGame.players.get(playerId);
      
      if (player.role === "SEER") {
        responseMessage = `B·∫°n ƒë√£ ch·ªçn ti√™n tri ${playerGame.players.get(targetId).name}.`;
      } else if (player.role === "BODYGUARD") {
        if (targetId === "self") {
          responseMessage = "B·∫°n ƒë√£ ch·ªçn b·∫£o v·ªá ch√≠nh m√¨nh ƒë√™m nay.";
        } else {
          responseMessage = `B·∫°n ƒë√£ ch·ªçn b·∫£o v·ªá ${playerGame.players.get(targetId).name}.`;
        }
      } else if (player.role === "WITCH") {
        if (targetId === "heal") {
          responseMessage = "B·∫°n ƒë√£ s·ª≠ d·ª•ng b√¨nh thu·ªëc c·ª©u.";
        } else if (targetId === "kill") {
          responseMessage = `B·∫°n ƒë√£ s·ª≠ d·ª•ng b√¨nh thu·ªëc ƒë·ªôc l√™n ${playerGame.players.get(targetId).name}.`;
        } else if (targetId === "none") {
          responseMessage = "B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng s·ª≠ d·ª•ng thu·ªëc.";
        } else {
          responseMessage = `B·∫°n ƒë√£ ch·ªçn ${playerGame.players.get(targetId).name}.`;
        }
      } else if (player.role === "WEREWOLF") {
        responseMessage = `B·∫°n ƒë√£ ch·ªçn t·∫•n c√¥ng ${playerGame.players.get(targetId).name}.`;
      }
      
      await interaction.reply({ 
        content: responseMessage, 
        ephemeral: true 
      });
    } else {
      await interaction.reply({ 
        content: "Kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông trong l√∫c n√†y.", 
        ephemeral: true 
      });
    }
  },
  
  // Handle Hunter ability select menu interaction
  async handleHunterSelect(interaction) {
    // Extract player ID from custom ID
    const hunterId = interaction.customId.replace('masoi_hunter_', '');
    
    // Find the game this player is in
    let hunterGame = null;
    for (const [channelId, game] of activeGames.entries()) {
      if (game.players.has(hunterId)) {
        hunterGame = game;
        break;
      }
    }
    
    if (!hunterGame) {
      await interaction.reply({ 
        content: "Kh√¥ng th·ªÉ t√¨m th·∫•y tr√≤ ch∆°i c·ªßa b·∫°n.", 
        ephemeral: true 
      });
      return;
    }
    
    // Get selected target
    const targetId = interaction.values[0];
    
    if (targetId === "none") {
      await interaction.reply({ 
        content: "B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng b·∫Øn ai.", 
        ephemeral: true 
      });
      
      // Notify the game channel
      const embed = new EmbedBuilder()
        .setTitle(`üèπ Th·ª£ SƒÉn Quy·∫øt ƒê·ªãnh`)
        .setDescription(`**${hunterGame.players.get(hunterId).name}** ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng b·∫Øn ai.`)
        .setColor("#e67e22");
      
      await hunterGame.channel.send({ embeds: [embed] });
    } else {
      const target = hunterGame.players.get(targetId);
      
      // Mark target as dead
      if (target) {
        target.isAlive = false;
        
        await interaction.reply({ 
          content: `B·∫°n ƒë√£ b·∫Øn ${target.name}.`, 
          ephemeral: true 
        });
        
        // Notify the game channel
        const embed = new EmbedBuilder()
          .setTitle(`üèπ Th·ª£ SƒÉn ƒê√£ B·∫Øn!`)
          .setDescription(`**${hunterGame.players.get(hunterId).name}** ƒë√£ b·∫Øn **${target.name}** (${ROLES[target.role].name} ${ROLES[target.role].emoji}).`)
          .setColor("#e67e22");
        
        await hunterGame.channel.send({ embeds: [embed] });
        
        // Check game end after hunter shot
        if (hunterGame.checkGameEnd()) {
          await hunterGame.endGame();
        }
      }
    }
  },
  
  // Handle vote button interaction
  async handleVoteButton(interaction) {
    const game = activeGames.get(interaction.channelId);
    if (!game || game.state !== STATE.VOTING) return;
    
    // Get target ID from button
    const targetId = interaction.customId.replace('masoi_vote_', '');
    
    // Register vote
    const success = game.handleVote(interaction.user.id, targetId);
    
    if (success) {
      if (targetId === 'skip') {
        await interaction.reply({ 
          content: `B·∫°n ƒë√£ quy·∫øt ƒë·ªãnh kh√¥ng b·ªè phi·∫øu.`, 
          ephemeral: true 
        });
      } else {
        const target = game.players.get(targetId);
        await interaction.reply({ 
          content: `B·∫°n ƒë√£ b·ªè phi·∫øu cho ${target.name}.`, 
          ephemeral: true 
        });
      }
    } else {
      await interaction.reply({ 
        content: "B·∫°n kh√¥ng th·ªÉ b·ªè phi·∫øu trong l√∫c n√†y.", 
        ephemeral: true 
      });
    }
  },
  
  // Update the lobby message with current players
  async updateLobbyMessage(game) {
    if (game.messageId) {
      try {
        const message = await game.channel.messages.fetch(game.messageId);
        
        const embed = new EmbedBuilder()
          .setTitle("üê∫ Tr√≤ Ch∆°i Ma S√≥i")
          .setDescription("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia!")
          .setColor("#9b59b6")
          .addFields(
            { name: "Ng∆∞·ªùi Ch∆°i", value: this.getPlayersList(game) },
            { name: "C√°ch Ch∆°i", value: "Ma S√≥i l√† tr√≤ ch∆°i m·∫°o hi·ªÉm d·ª±a tr√™n t√¢m l√Ω. M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n m·ªôt vai tr√≤ b√≠ m·∫≠t. Ma S√≥i s·∫Ω √¢m th·∫ßm ƒÉn th·ªãt d√¢n l√†ng m·ªói ƒë√™m, trong khi d√¢n l√†ng ph·∫£i t√¨m ra v√† ti√™u di·ªát Ma S√≥i." }
          );
        
        await message.edit({ embeds: [embed] });
      } catch (error) {
        console.error("Error updating lobby message:", error);
      }
    }
  },
  
  // Commands
  commands: [
    {
      name: "masoi",
      description: "B·∫Øt ƒë·∫ßu tr√≤ ch∆°i Ma S√≥i",
      data: {
        name: "masoi",
        description: "B·∫Øt ƒë·∫ßu tr√≤ ch∆°i Ma S√≥i",
        options: [
          {
            name: "action",
            description: "H√†nh ƒë·ªông",
            type: 3, // STRING
            required: false,
            choices: [
              { name: "T·∫°o tr√≤ ch∆°i m·ªõi", value: "create" },
              { name: "Tham gia", value: "join" },
              { name: "B·∫Øt ƒë·∫ßu", value: "start" },
              { name: "H·ªßy", value: "cancel" },
              { name: "Gi√∫p ƒë·ª°", value: "help" }
            ]
          }
        ]
      },
      slash: true,
      async execute(interaction, bot) {
        const action = interaction.options.getString("action") || "create";
        
        if (action === "create") {
          // Check if there's already a game in this channel
          if (activeGames.has(interaction.channelId)) {
            return interaction.reply({
              content: "ƒê√£ c√≥ tr√≤ ch∆°i Ma S√≥i ƒëang di·ªÖn ra trong k√™nh n√†y!",
              ephemeral: true
            });
          }
          
          // Create a new game
          const game = new WerewolfGame(interaction.channel, interaction.user);
          activeGames.set(interaction.channelId, game);
          
          // Add the host to the game
          game.addPlayer(interaction.user);
          
          // Create a lobby message with join button
          const embed = new EmbedBuilder()
            .setTitle("üê∫ Tr√≤ Ch∆°i Ma S√≥i")
            .setDescription("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia!")
            .setColor("#9b59b6")
            .addFields(
              { name: "Ng∆∞·ªùi Ch∆°i", value: `‚Ä¢ ${interaction.user.username}` },
              { name: "C√°ch Ch∆°i", value: "Ma S√≥i l√† tr√≤ ch∆°i m·∫°o hi·ªÉm d·ª±a tr√™n t√¢m l√Ω. M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n m·ªôt vai tr√≤ b√≠ m·∫≠t. Ma S√≥i s·∫Ω √¢m th·∫ßm ƒÉn th·ªãt d√¢n l√†ng m·ªói ƒë√™m, trong khi d√¢n l√†ng ph·∫£i t√¨m ra v√† ti√™u di·ªát Ma S√≥i." }
            );
          
          const joinButton = new ButtonBuilder()
            .setCustomId('masoi_join')
            .setLabel('Tham Gia')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üê∫');
          
          const startButton = new ButtonBuilder()
            .setCustomId('masoi_start')
            .setLabel('B·∫Øt ƒê·∫ßu')
            .setStyle(ButtonStyle.Success)
            .setEmoji('üéÆ');
          
          const row = new ActionRowBuilder().addComponents(joinButton, startButton);
          
          const message = await interaction.reply({
            embeds: [embed],
            components: [row],
            fetchReply: true
          });
          
          // Store the message ID for later updates
          game.messageId = message.id;
          
        } else if (action === "join") {
          // Join an existing game
          const game = activeGames.get(interaction.channelId);
          
          if (!game) {
            return interaction.reply({
              content: "Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!",
              ephemeral: true
            });
          }
          
          if (game.state !== STATE.LOBBY) {
            return interaction.reply({
              content: "Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia l√∫c n√†y!",
              ephemeral: true
            });
          }
          
          const success = game.addPlayer(interaction.user);
          
          if (success) {
            await interaction.reply(`${interaction.user} ƒë√£ tham gia tr√≤ ch∆°i Ma S√≥i!`);
            await this.updateLobbyMessage(game);
          } else {
            await interaction.reply({
              content: "B·∫°n ƒë√£ tham gia tr√≤ ch∆°i n√†y!",
              ephemeral: true
            });
          }
          
        } else if (action === "start") {
          // Start an existing game
          const game = activeGames.get(interaction.channelId);
          
          if (!game) {
            return interaction.reply({
              content: "Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!",
              ephemeral: true
            });
          }
          
          if (game.host.id !== interaction.user.id) {
            return interaction.reply({
              content: "Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu!",
              ephemeral: true
            });
          }
          
          if (game.state !== STATE.LOBBY) {
            return interaction.reply({
              content: "Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu!",
              ephemeral: true
            });
          }
          
          const result = await game.start();
          
          if (result.success) {
            await interaction.reply("Tr√≤ ch∆°i Ma S√≥i ƒë√£ b·∫Øt ƒë·∫ßu! M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ri√™ng v·ªõi vai tr√≤ c·ªßa m√¨nh.");
          } else {
            await interaction.reply({
              content: result.message,
              ephemeral: true
            });
          }
          
        } else if (action === "cancel") {
          // Cancel an existing game
          const game = activeGames.get(interaction.channelId);
          
          if (!game) {
            return interaction.reply({
              content: "Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!",
              ephemeral: true
            });
          }
          
          if (game.host.id !== interaction.user.id) {
            return interaction.reply({
              content: "Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ h·ªßy!",
              ephemeral: true
            });
          }
          
          activeGames.delete(interaction.channelId);
          
          await interaction.reply("Tr√≤ ch∆°i Ma S√≥i ƒë√£ b·ªã h·ªßy.");
          
        } else if (action === "help") {
          // Show help information
          const embed = new EmbedBuilder()
            .setTitle("üê∫ Tr√≤ Ch∆°i Ma S√≥i - Tr·ª£ Gi√∫p")
            .setColor("#9b59b6")
            .addFields(
              { name: "T·∫°o Tr√≤ Ch∆°i", value: "/masoi create - T·∫°o tr√≤ ch∆°i m·ªõi" },
              { name: "Tham Gia", value: "/masoi join - Tham gia tr√≤ ch∆°i" },
              { name: "B·∫Øt ƒê·∫ßu", value: "/masoi start - B·∫Øt ƒë·∫ßu tr√≤ ch∆°i (ch·ªâ ng∆∞·ªùi t·∫°o)" },
              { name: "H·ªßy", value: "/masoi cancel - H·ªßy tr√≤ ch∆°i (ch·ªâ ng∆∞·ªùi t·∫°o)" },
              { name: "Vai Tr√≤", value: "Ma S√≥i üê∫, D√¢n L√†ng üë®‚Äçüåæ, Ti√™n Tri üëÅÔ∏è, B·∫£o V·ªá üõ°Ô∏è, Ph√π Th·ªßy üßô‚Äç‚ôÄÔ∏è, Th·ª£ SƒÉn üèπ" }
            );
          
          await interaction.reply({
            embeds: [embed],
            ephemeral: true
          });
        }
      },
      
      // Legacy command
      legacy: true,
      async legacyExecute(message, args, bot) {
        const action = args[0] || "create";
        
        if (action === "create" || action === "tao") {
          // Check if there's already a game in this channel
          if (activeGames.has(message.channelId)) {
            return message.reply("ƒê√£ c√≥ tr√≤ ch∆°i Ma S√≥i ƒëang di·ªÖn ra trong k√™nh n√†y!");
          }
          
          // Create a new game
          const game = new WerewolfGame(message.channel, message.author);
          activeGames.set(message.channelId, game);
          
          // Add the host to the game
          game.addPlayer(message.author);
          
          // Create a lobby message with join button
          const embed = new EmbedBuilder()
            .setTitle("üê∫ Tr√≤ Ch∆°i Ma S√≥i")
            .setDescription("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia!")
            .setColor("#9b59b6")
            .addFields(
              { name: "Ng∆∞·ªùi Ch∆°i", value: `‚Ä¢ ${message.author.username}` },
              { name: "C√°ch Ch∆°i", value: "Ma S√≥i l√† tr√≤ ch∆°i m·∫°o hi·ªÉm d·ª±a tr√™n t√¢m l√Ω. M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n m·ªôt vai tr√≤ b√≠ m·∫≠t. Ma S√≥i s·∫Ω √¢m th·∫ßm ƒÉn th·ªãt d√¢n l√†ng m·ªói ƒë√™m, trong khi d√¢n l√†ng ph·∫£i t√¨m ra v√† ti√™u di·ªát Ma S√≥i." }
            );
          
          const joinButton = new ButtonBuilder()
            .setCustomId('masoi_join')
            .setLabel('Tham Gia')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üê∫');
          
          const startButton = new ButtonBuilder()
            .setCustomId('masoi_start')
            .setLabel('B·∫Øt ƒê·∫ßu')
            .setStyle(ButtonStyle.Success)
            .setEmoji('üéÆ');
          
          const row = new ActionRowBuilder().addComponents(joinButton, startButton);
          
          const sentMessage = await message.channel.send({
            embeds: [embed],
            components: [row]
          });
          
          // Store the message ID for later updates
          game.messageId = sentMessage.id;
          
        } else if (action === "join" || action === "thamgia") {
          // Join an existing game
          const game = activeGames.get(message.channelId);
          
          if (!game) {
            return message.reply("Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!");
          }
          
          if (game.state !== STATE.LOBBY) {
            return message.reply("Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia l√∫c n√†y!");
          }
          
          const success = game.addPlayer(message.author);
          
          if (success) {
            await message.reply(`${message.author} ƒë√£ tham gia tr√≤ ch∆°i Ma S√≥i!`);
            await this.updateLobbyMessage(game);
          } else {
            await message.reply("B·∫°n ƒë√£ tham gia tr√≤ ch∆°i n√†y!");
          }
          
        } else if (action === "start" || action === "batdau") {
          // Start an existing game
          const game = activeGames.get(message.channelId);
          
          if (!game) {
            return message.reply("Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!");
          }
          
          if (game.host.id !== message.author.id) {
            return message.reply("Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu!");
          }
          
          if (game.state !== STATE.LOBBY) {
            return message.reply("Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu!");
          }
          
          const result = await game.start();
          
          if (result.success) {
            await message.reply("Tr√≤ ch∆°i Ma S√≥i ƒë√£ b·∫Øt ƒë·∫ßu! M·ªói ng∆∞·ªùi ch∆°i s·∫Ω nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ri√™ng v·ªõi vai tr√≤ c·ªßa m√¨nh.");
          } else {
            await message.reply(result.message);
          }
          
        } else if (action === "cancel" || action === "huy") {
          // Cancel an existing game
          const game = activeGames.get(message.channelId);
          
          if (!game) {
            return message.reply("Kh√¥ng c√≥ tr√≤ ch∆°i Ma S√≥i n√†o ƒëang di·ªÖn ra trong k√™nh n√†y!");
          }
          
          if (game.host.id !== message.author.id) {
            return message.reply("Ch·ªâ ng∆∞·ªùi t·∫°o tr√≤ ch∆°i m·ªõi c√≥ th·ªÉ h·ªßy!");
          }
          
          activeGames.delete(message.channelId);
          
          await message.reply("Tr√≤ ch∆°i Ma S√≥i ƒë√£ b·ªã h·ªßy.");
          
        } else if (action === "help" || action === "huongdan") {
          // Show help information
          const embed = new EmbedBuilder()
            .setTitle("üê∫ Tr√≤ Ch∆°i Ma S√≥i - Tr·ª£ Gi√∫p")
            .setColor("#9b59b6")
            .addFields(
              { name: "T·∫°o Tr√≤ Ch∆°i", value: "!masoi create ho·∫∑c !masoi tao - T·∫°o tr√≤ ch∆°i m·ªõi" },
              { name: "Tham Gia", value: "!masoi join ho·∫∑c !masoi thamgia - Tham gia tr√≤ ch∆°i" },
              { name: "B·∫Øt ƒê·∫ßu", value: "!masoi start ho·∫∑c !masoi batdau - B·∫Øt ƒë·∫ßu tr√≤ ch∆°i (ch·ªâ ng∆∞·ªùi t·∫°o)" },
              { name: "H·ªßy", value: "!masoi cancel ho·∫∑c !masoi huy - H·ªßy tr√≤ ch∆°i (ch·ªâ ng∆∞·ªùi t·∫°o)" },
              { name: "Vai Tr√≤", value: "Ma S√≥i üê∫, D√¢n L√†ng üë®‚Äçüåæ, Ti√™n Tri üëÅÔ∏è, B·∫£o V·ªá üõ°Ô∏è, Ph√π Th·ªßy üßô‚Äç‚ôÄÔ∏è, Th·ª£ SƒÉn üèπ" }
            );
          
          await message.reply({ embeds: [embed] });
        } else {
          // Unknown action
          await message.reply("H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! D√πng `!masoi help` ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn.");
        }
      }
    },
    // Alias for the main command (shorter name)
    {
      name: "ms",
      description: "Alias cho l·ªánh Ma S√≥i (g√µ t·∫Øt)",
      data: {
        name: "ms",
        description: "Alias cho l·ªánh Ma S√≥i (g√µ t·∫Øt)",
        options: [
          {
            name: "action",
            description: "H√†nh ƒë·ªông",
            type: 3, // STRING
            required: false,
            choices: [
              { name: "T·∫°o tr√≤ ch∆°i m·ªõi", value: "create" },
              { name: "Tham gia", value: "join" },
              { name: "B·∫Øt ƒë·∫ßu", value: "start" },
              { name: "H·ªßy", value: "cancel" },
              { name: "Gi√∫p ƒë·ª°", value: "help" }
            ]
          }
        ]
      },
      slash: true,
      async execute(interaction, bot) {
        // For the alias, directly call the masoi command from the bot's commands
        const masoiCommand = bot.commandHandler.commands.get("masoi");
        if (masoiCommand) {
          await masoiCommand.execute(interaction, bot);
        } else {
          await interaction.reply({
            content: "L·ªánh Ma S√≥i kh√¥ng kh·∫£ d·ª•ng!",
            ephemeral: true
          });
        }
      },
      
      // Legacy command
      legacy: true,
      async legacyExecute(message, args, bot) {
        // For the alias, directly call the masoi command from the bot's commands
        const masoiCommand = bot.commandHandler.commands.get("masoi");
        if (masoiCommand) {
          await masoiCommand.legacyExecute(message, args, bot);
        } else {
          await message.reply("L·ªánh Ma S√≥i kh√¥ng kh·∫£ d·ª•ng!");
        }
      }
    }
  ]
};